name: license_plate_recognition

parameters:
  # output_frame:
  #   codec: ${oc.env:CODEC, 'h264'}
  #   encoder_params:
  #     bitrate: 8000000
  frame:
    width: ${oc.decode:${oc.env:FRAME_WIDTH, 1920}}
    height: ${oc.decode:${oc.env:FRAME_HEIGHT, 1080}}
  draw_func:
    module: samples.license_plate_recognition.overlay
    class_name: Overlay
    rendered_objects:
      yolov8n:
        Car:
          bbox:
            border_color: "00FF00FF" # Green
            background_color: "00000000" # transparent
            thickness: 4
      LPDNet:
        lpd:
          bbox:
            border_color: "0000FFFF" # Blue
            thickness: 4
          label:
            font_color: "FFFFFFFF" # White
            font_scale: 1.5
            thickness: 2
  detected_object:
    id: 2
    label: Car

  batch_size: 1

pipeline:
  elements:
    - element: nvinfer@detector
      name: yolov8n1
      model:
        remote:
          url: s3://savant-data/models/yolov8n/yolov8n_000bcd6.zip
          checksum_url: s3://savant-data/models/yolov8n/yolov8n_000bcd6.md5
          parameters:
            endpoint: https://eu-central-1.linodeobjects.com
        format: onnx
        model_file: yolov8n.onnx
        batch_size: ${parameters.batch_size}
        input:
          shape: [3, 640, 640] # TODO: use [3, 384, 640]
          maintain_aspect_ratio: true
          scale_factor: 0.0039215697906911373
        output:
          layer_names: [boxes, scores, classes]
          converter:
            module: savant.converter.yolo
            class_name: TensorToBBoxConverter
            kwargs:
              confidence_threshold: 0.6
              top_k: 100
          objects:
            - class_id: ${parameters.detected_object.id}
              label: ${parameters.detected_object.label}
              selector:
                kwargs:
                  confidence_threshold: 0.6
                  nms_iou_threshold: 0.5
                  min_width: 30
                  min_height: 40

    - element: nvinfer@detector
      name: yolov8n2
      model:
        remote:
          url: s3://savant-data/models/yolov8n/yolov8n_000bcd6.zip
          checksum_url: s3://savant-data/models/yolov8n/yolov8n_000bcd6.md5
          parameters:
            endpoint: https://eu-central-1.linodeobjects.com
        format: onnx
        model_file: yolov8n.onnx
        batch_size: ${parameters.batch_size}
        input:
          shape: [3, 640, 640] # TODO: use [3, 384, 640]
          maintain_aspect_ratio: true
          scale_factor: 0.0039215697906911373
        output:
          layer_names: [boxes, scores, classes]
          converter:
            module: savant.converter.yolo
            class_name: TensorToBBoxConverter
            kwargs:
              confidence_threshold: 0.6
              top_k: 100
          objects:
            - class_id: ${parameters.detected_object.id}
              label: ${parameters.detected_object.label}
              selector:
                kwargs:
                  confidence_threshold: 0.6
                  nms_iou_threshold: 0.5
                  min_width: 30
                  min_height: 40

    - element: nvinfer@detector
      name: yolov8n3
      model:
        remote:
          url: s3://savant-data/models/yolov8n/yolov8n_000bcd6.zip
          checksum_url: s3://savant-data/models/yolov8n/yolov8n_000bcd6.md5
          parameters:
            endpoint: https://eu-central-1.linodeobjects.com
        format: onnx
        model_file: yolov8n.onnx
        batch_size: ${parameters.batch_size}
        input:
          shape: [3, 640, 640] # TODO: use [3, 384, 640]
          maintain_aspect_ratio: true
          scale_factor: 0.0039215697906911373
        output:
          layer_names: [boxes, scores, classes]
          converter:
            module: savant.converter.yolo
            class_name: TensorToBBoxConverter
            kwargs:
              confidence_threshold: 0.6
              top_k: 100
          objects:
            - class_id: ${parameters.detected_object.id}
              label: ${parameters.detected_object.label}
              selector:
                kwargs:
                  confidence_threshold: 0.6
                  nms_iou_threshold: 0.5
                  min_width: 30
                  min_height: 40

    # Creating a custom ROI for all Car objects
    - element: pyfunc
      module: samples.license_plate_recognition.custom_roi
      class_name: CreateROI
      kwargs:
        roi: ocr.roi
        inputs:
          - yolov8n1.Car
          - yolov8n2.Car
          - yolov8n3.Car

    # Running a fake OCR step
    - element: pyfunc
      module: samples.license_plate_recognition.custom_roi
      class_name: FakeOCR
      kwargs:
        roi: ocr.roi
        attribute: fake-ocr.text

    # Moving the OCR attribute back to the original object
    - element: pyfunc
      module: samples.license_plate_recognition.custom_roi
      class_name: MergeROI
      kwargs:
        roi: ocr.roi
        attribute: fake-ocr.text
